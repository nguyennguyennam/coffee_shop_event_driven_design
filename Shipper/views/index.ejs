<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>📦 Shipper Dashboard</title>
  <link rel="stylesheet" href="/styles.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
  <h1>🚚 Shipper Dashboard</h1>

  <div class="tabs">
    <button class="tab-button active" onclick="switchTab('payment-pending')">⏳ Chờ Thanh Toán</button>
    <button class="tab-button" onclick="switchTab('delivery-pending')">🕒 Chờ Giao</button>
    <button class="tab-button" onclick="switchTab('delivered')">✅ Đã Giao</button>
  </div>

  <!-- Tab Chờ Thanh Toán -->
  <div id="payment-pending-tab" class="orders-tab active">
    <h2>⏳ Đơn hàng chờ thanh toán</h2>
    <% const paymentPendingOrders = orders.filter(o => o.status === 'Pending'); %>
    <div class="orders-container" id="payment-pending-container">

    <% if (paymentPendingOrders.length === 0) { %>
      <p id="noPaymentPending">Không có đơn hàng nào chờ thanh toán.</p>
    <% } else { %>
        <% paymentPendingOrders.forEach(order => { %>
          <div class="order-card" data-id="<%= order.orderId %>">
            <div class="order-header">
              <span><strong>🆔 <%= order.orderId %></strong></span>
              <span class="status pending"><%= order.status %></span>
            </div>
            <div class="order-body">
              <p>👤 Khách: <%= order.customerId %></p>
              <p>📅 Ngày: <%= order.orderDate %></p>
              <p>💰 Giá: <strong><%= order.price %></strong> VND</p>
              <ul>
                <% order.orderItems.forEach(item => { %>
                  <li>
                    <img src="<%= item.drinkImage %>" alt="<%= item.drinkName %>" class="drink-image" />
                    <%= item.drinkName %> (x<%= item.quantity %>)
                  </li>
                <% }); %>
              </ul>
            </div>
          </div>
        <% }); %>
    <% } %>
    </div>
  </div>

  <!-- Tab Chờ Giao -->
  <div id="delivery-pending-tab" class="orders-tab">
    <h2>🕒 Đơn hàng chờ giao</h2>
    <% const deliveryPendingOrders = orders.filter(o => o.status === 'Payment'); %>
    <div class="orders-container" id="delivery-pending-container">
    <% if (deliveryPendingOrders.length === 0) { %>
      <p id="noDeliveryPending">Không có đơn hàng nào chờ giao.</p>
    <% } else { %>
        <% deliveryPendingOrders.forEach(order => { %>
          <div class="order-card" data-id="<%= order.orderId %>">
            <div class="order-header">
              <span><strong>🆔 <%= order.orderId %></strong></span>
              <span class="status payment"><%= order.status %></span>
            </div>
            <div class="order-body">
              <p>👤 Khách: <%= order.customerId %></p>
              <p>📅 Ngày: <%= order.orderDate %></p>
              <p>💰 Giá: <strong><%= order.price %></strong> VND</p>
              <ul>
                <% order.orderItems.forEach(item => { %>
                  <li>
                    <img src="<%= item.drinkImage %>" alt="<%= item.drinkName %>" class="drink-image" />
                    <%= item.drinkName %> (x<%= item.quantity %>)
                  </li>
                <% }); %>
              </ul>
              <form onsubmit="handleComplete(event, '<%= order.orderId %>')">
                <button type="submit">✅ Hoàn tất giao</button>
              </form>
            </div>
          </div>
        <% }); %>
    <% } %>
    </div>
  </div>

  <!-- Tab Đã Giao -->
  <div id="delivered-tab" class="orders-tab">
    <h2>✅ Đơn hàng đã giao</h2>
    <% const deliveredOrders = orders.filter(o => o.status === 'Order Delivered'); %>
    <div class="orders-container" id="delivered-container">
    <% if (deliveredOrders.length === 0) { %>
      <p id="noDelivered">Chưa có đơn hàng nào đã giao.</p>
    <% } else { %>
        <% deliveredOrders.forEach(order => { %>
          <div class="order-card delivered" data-id="<%= order.orderId %>">
            <div class="order-header">
              <span><strong>🆔 <%= order.orderId %></strong></span>
              <span class="status delivered"><%= order.status %></span>
            </div>
            <div class="order-body">
              <p>👤 Khách: <%= order.customerId %></p>
              <p>📅 Ngày: <%= order.orderDate %></p>
              <p>💰 Giá: <strong><%= order.price %></strong> VND</p>
              <ul>
                <% order.orderItems.forEach(item => { %>
                  <li>
                    <img src="<%= item.drinkImage %>" alt="<%= item.drinkName %>" class="drink-image" />
                    <%= item.drinkName %> (x<%= item.quantity %>)
                  </li>
                <% }); %>
              </ul>
            </div>
          </div>
          <% }); %>
    <% } %>
    </div>
  </div>
<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
  <script>
    function switchTab(tab) {
      const buttons = document.querySelectorAll('.tab-button');
      buttons.forEach(btn => btn.classList.remove('active'));

      // Hide all tabs first
      document.querySelectorAll('.orders-tab').forEach(t => t.classList.remove('active'));
      
      // Show selected tab and activate corresponding button
      if (tab === 'payment-pending') {
        document.querySelector('#payment-pending-tab').classList.add('active');
        buttons[0].classList.add('active');
      } else if (tab === 'delivery-pending') {
        document.querySelector('#delivery-pending-tab').classList.add('active');
        buttons[1].classList.add('active');
      } else {
        document.querySelector('#delivered-tab').classList.add('active');
        buttons[2].classList.add('active');
      }
    }




    // Initialize tab display
    updateNoOrdersText();

    // Socket.io connection
    const socket = io("http://localhost:3006");

    // Listen for new orders
    socket.on("newOrder", (order) => {
      console.log("📦 Đơn hàng mới:", order);

      let orders = JSON.parse(localStorage.getItem("orders") || "[]");
      if (!orders.some(o => o.orderId === order.orderId)) {
        orders.unshift(order);
        localStorage.setItem("orders", JSON.stringify(orders));
        renderOrderCard(order);
      }
      updateNoOrdersText();
    });

    // Listen for payment updates
    socket.on("orderPaymentUpdated", ({ orderId, status }) => {
      console.log(`💳 Đơn hàng ${orderId} đã thanh toán`);
      
      // Update order status in localStorage
      let orders = JSON.parse(localStorage.getItem("orders") || "[]");
      const orderIndex = orders.findIndex(o => o.orderId === orderId);
      if (orderIndex !== -1) {
        orders[orderIndex].status = status;
        localStorage.setItem("orders", JSON.stringify(orders));
        
        // Move card to appropriate tab
        const card = document.querySelector(`[data-id="${orderId}"]`);
        if (card) {
          card.remove();
          renderOrderCard(orders[orderIndex]);
        }
      }
      updateNoOrdersText();
    });

    // Listen for delivered orders
    socket.on("orderDeliveredUI", ({ orderId }) => {
      console.log(`🧹 Đơn hàng ${orderId} đã được giao`);
      
      // Update order status in localStorage
      let orders = JSON.parse(localStorage.getItem("orders") || "[]");
      const orderIndex = orders.findIndex(o => o.orderId === orderId);
      if (orderIndex !== -1) {
        orders[orderIndex].status = 'Delivered';
        localStorage.setItem("orders", JSON.stringify(orders));
        
        // Move card to delivered tab
        const card = document.querySelector(`[data-id="${orderId}"]`);
        if (card) {
          card.remove();
          renderOrderCard(orders[orderIndex]);
        }
      }
      updateNoOrdersText();
    });

    // Render order card based on status
    function renderOrderCard(order) {
      const orderCard = document.createElement("div");
      orderCard.className = "order-card";
      orderCard.dataset.id = order.orderId;

      if (order.status === 'Delivered') {
        orderCard.classList.add('delivered');
      }

      const itemsHtml = (order.orderItems && Array.isArray(order.orderItems) && order.orderItems.length > 0) ?
        order.orderItems.map(item => `<li>
          <img src="${item.drinkImage}" alt="${item.drinkName}" class="drink-image" />
          ${item.drinkName} (x${item.quantity})</li>`).join('') :
        '<li>Không có món nào được liệt kê.</li>';

      let actionButton = '';
      if (order.status === 'Payment') {
        actionButton = `
          <form onsubmit="handleComplete(event, '${order.orderId}')">
            <button type="submit" class="complete-btn">✅ Hoàn tất giao</button>
          </form>
        `;
      }

      orderCard.innerHTML = `
        <div class="order-header">
          <span>🆔 <strong>${order.orderId}</strong></span>
          <span class="status ${order.status ? order.status.toLowerCase() : ''}">${order.status || 'Unknown'}</span>
        </div>
        <div class="order-body">
          <p>👤 Khách: ${order.customerId}</p>
          <p>📅 Ngày: ${order.orderDate}</p>
          <p>💰 Giá: <strong>${order.price}</strong> VND</p>
          <p>🧾 Món: 
            <ul>
              ${itemsHtml}
            </ul>
          </p>
          ${actionButton}
        </div>
      `;

      // Determine which container to add the card to based on status
      let container;
      if (order.status === 'Pending') {
        container = document.getElementById('payment-pending-container');
      } else if (order.status === 'Payment') {
        container = document.getElementById('delivery-pending-container');
      } else if (order.status === 'Order Delivered') {
        container = document.getElementById('delivered-container');
      }

      if (container) {
        container.prepend(orderCard);
      } else {
        // Fallback - should not normally happen
        console.warn('No container found for order status:', order.status);
        const fallbackContainer = document.querySelector('.orders-container') || 
                                 document.createElement('div');
        fallbackContainer.prepend(orderCard);
      }

      updateNoOrdersText();
    }

    // Handle order completion
    function handleComplete(event, orderId) {
      event.preventDefault();

      fetch(`/orders/${orderId}/complete`, {
        method: "POST"
      }).then(res => {
        if (res.ok) {
          // Update order status in localStorage
          let orders = JSON.parse(localStorage.getItem("orders") || "[]");
          const orderIndex = orders.findIndex(o => o.orderId === orderId);
          if (orderIndex !== -1) {
            orders[orderIndex].status = 'Order Delivered';
            localStorage.setItem("orders", JSON.stringify(orders));
            
            // Move card to delivered tab
            const card = document.querySelector(`[data-id="${orderId}"]`);
            if (card) {
              card.remove();
              renderOrderCard(orders[orderIndex]);
            }
          }
          updateNoOrdersText();
          console.log("✅ Đã giao đơn hàng:", orderId);
        } else {
          alert("❌ Không thể hoàn tất đơn hàng.");
        }
      }).catch(err => {
        console.error("❌ Lỗi:", err);
        alert("Lỗi mạng khi hoàn tất đơn hàng.");
      });
    }

    // Update "no orders" text visibility for all tabs
    function updateNoOrdersText() {
      const tabs = [
        { id: 'payment-pending', element: document.getElementById('noPaymentPending') },
        { id: 'delivery-pending', element: document.getElementById('noDeliveryPending') },
        { id: 'delivered', element: document.getElementById('noDelivered') }
      ];
      tabs.forEach(tab => {
        if (tab.element) {
          const container = document.getElementById(`${tab.id}-container`);
          if (container && container.children.length > 0) {
            tab.element.style.display = 'none';
          } else {
            tab.element.style.display = 'block';
          }
        }
      });
    }
  </script>
</body>
</html>